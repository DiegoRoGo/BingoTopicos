//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bingo.WcfBingo {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Board", Namespace="http://schemas.datacontract.org/2004/07/WcfBingo.Dominio.Modelos")]
    [System.SerializableAttribute()]
    public partial class Board : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<System.Collections.Generic.List<Bingo.WcfBingo.Cell>> GameBoardField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<System.Collections.Generic.List<Bingo.WcfBingo.Cell>> GameBoard {
            get {
                return this.GameBoardField;
            }
            set {
                if ((object.ReferenceEquals(this.GameBoardField, value) != true)) {
                    this.GameBoardField = value;
                    this.RaisePropertyChanged("GameBoard");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Cell", Namespace="http://schemas.datacontract.org/2004/07/WcfBingo.Dominio.Modelos")]
    [System.SerializableAttribute()]
    public partial class Cell : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsMarkedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMarked {
            get {
                return this.IsMarkedField;
            }
            set {
                if ((this.IsMarkedField.Equals(value) != true)) {
                    this.IsMarkedField = value;
                    this.RaisePropertyChanged("IsMarked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfBingo.IServiceBingo")]
    public interface IServiceBingo {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBingo/MarkBoards", ReplyAction="http://tempuri.org/IServiceBingo/MarkBoardsResponse")]
        Bingo.WcfBingo.MarkBoardsResponse MarkBoards(Bingo.WcfBingo.MarkBoardsRequest request);
        
        // CODEGEN: Generando contrato de mensaje, ya que la operación tiene múltiples valores de devolución.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBingo/MarkBoards", ReplyAction="http://tempuri.org/IServiceBingo/MarkBoardsResponse")]
        System.Threading.Tasks.Task<Bingo.WcfBingo.MarkBoardsResponse> MarkBoardsAsync(Bingo.WcfBingo.MarkBoardsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBingo/GetWinningBoards", ReplyAction="http://tempuri.org/IServiceBingo/GetWinningBoardsResponse")]
        System.Collections.Generic.List<Bingo.WcfBingo.Board> GetWinningBoards(System.Collections.Generic.List<Bingo.WcfBingo.Board> players, Bingo.WcfBingo.Board winningPattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBingo/GetWinningBoards", ReplyAction="http://tempuri.org/IServiceBingo/GetWinningBoardsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Bingo.WcfBingo.Board>> GetWinningBoardsAsync(System.Collections.Generic.List<Bingo.WcfBingo.Board> players, Bingo.WcfBingo.Board winningPattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBingo/GenerateBoards", ReplyAction="http://tempuri.org/IServiceBingo/GenerateBoardsResponse")]
        System.Collections.Generic.List<Bingo.WcfBingo.Board> GenerateBoards(int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBingo/GenerateBoards", ReplyAction="http://tempuri.org/IServiceBingo/GenerateBoardsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Bingo.WcfBingo.Board>> GenerateBoardsAsync(int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBingo/GenerateWinningPattern", ReplyAction="http://tempuri.org/IServiceBingo/GenerateWinningPatternResponse")]
        Bingo.WcfBingo.Board GenerateWinningPattern();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBingo/GenerateWinningPattern", ReplyAction="http://tempuri.org/IServiceBingo/GenerateWinningPatternResponse")]
        System.Threading.Tasks.Task<Bingo.WcfBingo.Board> GenerateWinningPatternAsync();
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MarkBoards", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class MarkBoardsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Collections.Generic.List<Bingo.WcfBingo.Board> Players;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int number;
        
        public MarkBoardsRequest() {
        }
        
        public MarkBoardsRequest(System.Collections.Generic.List<Bingo.WcfBingo.Board> Players, int number) {
            this.Players = Players;
            this.number = number;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MarkBoardsResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class MarkBoardsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Collections.Generic.List<Bingo.WcfBingo.Board> Players;
        
        public MarkBoardsResponse() {
        }
        
        public MarkBoardsResponse(System.Collections.Generic.List<Bingo.WcfBingo.Board> Players) {
            this.Players = Players;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceBingoChannel : Bingo.WcfBingo.IServiceBingo, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceBingoClient : System.ServiceModel.ClientBase<Bingo.WcfBingo.IServiceBingo>, Bingo.WcfBingo.IServiceBingo {
        
        public ServiceBingoClient() {
        }
        
        public ServiceBingoClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceBingoClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceBingoClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceBingoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Bingo.WcfBingo.MarkBoardsResponse Bingo.WcfBingo.IServiceBingo.MarkBoards(Bingo.WcfBingo.MarkBoardsRequest request) {
            return base.Channel.MarkBoards(request);
        }
        
        public void MarkBoards(ref System.Collections.Generic.List<Bingo.WcfBingo.Board> Players, int number) {
            Bingo.WcfBingo.MarkBoardsRequest inValue = new Bingo.WcfBingo.MarkBoardsRequest();
            inValue.Players = Players;
            inValue.number = number;
            Bingo.WcfBingo.MarkBoardsResponse retVal = ((Bingo.WcfBingo.IServiceBingo)(this)).MarkBoards(inValue);
            Players = retVal.Players;
        }
        
        public System.Threading.Tasks.Task<Bingo.WcfBingo.MarkBoardsResponse> MarkBoardsAsync(Bingo.WcfBingo.MarkBoardsRequest request) {
            return base.Channel.MarkBoardsAsync(request);
        }
        
        public System.Collections.Generic.List<Bingo.WcfBingo.Board> GetWinningBoards(System.Collections.Generic.List<Bingo.WcfBingo.Board> players, Bingo.WcfBingo.Board winningPattern) {
            return base.Channel.GetWinningBoards(players, winningPattern);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Bingo.WcfBingo.Board>> GetWinningBoardsAsync(System.Collections.Generic.List<Bingo.WcfBingo.Board> players, Bingo.WcfBingo.Board winningPattern) {
            return base.Channel.GetWinningBoardsAsync(players, winningPattern);
        }
        
        public System.Collections.Generic.List<Bingo.WcfBingo.Board> GenerateBoards(int amount) {
            return base.Channel.GenerateBoards(amount);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Bingo.WcfBingo.Board>> GenerateBoardsAsync(int amount) {
            return base.Channel.GenerateBoardsAsync(amount);
        }
        
        public Bingo.WcfBingo.Board GenerateWinningPattern() {
            return base.Channel.GenerateWinningPattern();
        }
        
        public System.Threading.Tasks.Task<Bingo.WcfBingo.Board> GenerateWinningPatternAsync() {
            return base.Channel.GenerateWinningPatternAsync();
        }
    }
}
